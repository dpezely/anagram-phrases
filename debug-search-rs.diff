diff --git a/src/search.rs b/src/search.rs
index 99ff229..9ac6496 100644
--- a/src/search.rs
+++ b/src/search.rs
@@ -1,5 +1,6 @@
 use num_bigint::BigUint;
 use num_traits::Zero;
+use num_traits::ToPrimitive;
 use serde::Serialize;
 use std::collections::BTreeMap;
 
@@ -20,7 +21,7 @@ struct Search<'a> {
     limit: usize,                      // keys.len()
     descending_keys: Vec<&'a BigUint>, // high-to-low enforced by Constructor
     accumulator: Vec<&'a Vec<String>>, // candidate words in incomplete phrase
-    dedup: BTreeMap<String, bool>,     // ensure unique phrase when complete
+    dedup: BTreeMap<String, BigUint>,  // ensure unique phrase when complete
     results: Candidate<'a>,            // final set of unique phrases
 }
 
@@ -87,31 +88,44 @@ impl<'a,'b> Search<'a> {
             if product == test_product {
                 // Exact match -- Execution only reaches here via recursion
                 self.accumulator.push(&words);
+                println!("EXACT MATCH {} product={}\n {:?}",
+                         words.join(","), test_product, &self.accumulator);
                 // Success: only one key in `dictionary` could match `product`
                 self.push_if_unique();
                 return
             } else if product > test_product && product % test_product == zero {
                 // Found a factor that fits chain within accumulator.
+                println!("Try {} product={} as a factor\n {:?}",
+                         words.join(","), test_product, &self.accumulator);
                 // Optimization to possibly avoid recursion + loop:
                 let remainder = product / test_product;
                 if let Some(more_words) = self.dictionary.get(&remainder) {
                     self.accumulator.push(words);
+                    println!("MATCH {} p={} remainder={}\n {:?}",
+                             more_words.join(", "), test_product,
+                             remainder.to_u64().unwrap_or(0), &self.accumulator);
                     self.accumulator.push(more_words);
                     self.push_if_unique();
                     if start > 0 { // Execution reached here via recursion
+                        println!("pop stack after recursion");
                         return
                     }
                 } else if recursion_depth > 1 { // already checked 1 word remainder
                     self.accumulator.push(words);
+                    println!("recursion: remainder={} depth={} accumulated={}",
+                             remainder.to_u64().unwrap_or(0),
+                             recursion_depth-1, self.accumulator.len());
                     // Avoid processing same entries; `i` already incremented
                     self.factors(&remainder, i, recursion_depth - 1);
                     if start > 0 { // Execution reached here via recursion
+                        println!("pop stack after recursion");
                         self.accumulator.clear();
                         return
                     }
                 }
             }
         }
+        println!("reset");
         self.accumulator.clear();
     }
 
@@ -129,11 +143,21 @@ impl<'a,'b> Search<'a> {
             .map(|&x| x[0].as_str())
             .collect::<Vec<&str>>()
             .join("");
-        // Specifically avoiding the Entry API:
+
+        // DELETE ME: Final confirmation, assuming first entry is correct:
+        use crate::primes;
+        let essential = primes::essential_chars(&string);
+        let primes = primes::primes(&essential).unwrap();
+        let product = primes::primes_product(&primes).unwrap();
+        if self.dedup.len() > 0 {
+            assert_eq!(*self.dedup.values().next().unwrap(), product);
+        }                       // ...DELETE ME
+
+       // Specifically avoiding the Entry API:
         if self.dedup.contains_key(&string) {
             self.accumulator.clear();
         } else {
-            self.dedup.insert(string, true);
+            self.dedup.insert(string, product);
             self.results.0.push(self.accumulator.drain(..).collect());
         }
     }
